@model TaskManager.WEB.ViewModels.IssueEditView

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    ViewBag.Title = "Edit issue";

    var issue = Model;

    var employees = ViewBag.Employees;

    var projects = ViewBag.Projects;

    var statuses = ViewBag.Statuses;

    var error = ViewBag.Error;
}

<h2>@ViewBag.Title</h2>

@if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@using (Html.BeginForm(actionName: "AddOrUpdate", controllerName: "Issue"))
{
    <div class="form-horizontal">

        @Html.AntiForgeryToken()

        <hr />

        @Html.HiddenFor(_ => _.Id)

        <div class="form-group required">
            @Html.LabelFor(_ => _.ProjectId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" name="ProjectId">
                    <option hidden selected disabled>Select project</option>
                    @foreach (var project in projects)
                    {
                        if (project.Id == issue.ProjectId)
                        {
                            <option selected value="@issue.ProjectId">@project.ShortName</option>
                        }
                        else
                        {
                            <option value="@project.Id">@project.ShortName</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(_ => _.ProjectId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group required">
            @Html.LabelFor(_ => _.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(_ => _.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Write name" } })
                @Html.ValidationMessageFor(_ => _.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group required">
            @Html.LabelFor(_ => _.Work, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(_ => _.Work, new { htmlAttributes = new { @class = "form-control", @placeholder = "Write work (natural number)" } })
                @Html.ValidationMessageFor(_ => _.Work, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group required">
            @Html.LabelFor(_ => _.BeginDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(_ => _.BeginDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Write begin date" } })
                @Html.ValidationMessageFor(_ => _.BeginDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group required">
            @Html.LabelFor(_ => _.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(_ => _.EndDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Write end date" } })
                @Html.ValidationMessageFor(_ => _.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group required">
            @Html.LabelFor(_ => _.EmployeeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" name="EmployeeId">
                    <option hidden selected disabled>Select assignee</option>
                    @foreach (var employee in employees)
                    {
                        if (employee.Id == issue.EmployeeId)
                        {
                            <option selected value="@issue.EmployeeId">@employee.FullName</option>
                        }
                        else
                        {
                            <option value="@employee.Id">@employee.FullName</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(_ => _.EmployeeId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group required">
            @Html.LabelFor(_ => _.StatusId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" name="StatusId">
                    <option hidden selected disabled>Select status</option>
                    @foreach (var status in statuses)
                    {
                        if (status.Key == issue.StatusId)
                        {
                            <option selected value="@status.Key">@status.Value</option>
                        }
                        else
                        {
                            <option value="@status.Key">@status.Value</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(_ => _.StatusId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <input class="btn btn-primary" type="submit" value="Save" />
            @Html.ActionLink(linkText: "Cancel", actionName: "List", routeValues: null, controllerName: "Issue", htmlAttributes: new { @class = "btn" })
        </div>
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
