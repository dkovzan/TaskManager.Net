@model TaskManager.WEB.ViewModels.IssuesListView
@using TaskManager.WEB.Helpers
@{
    ViewBag.Title = "Issues list";

    Layout = "~/Views/Shared/_Layout.cshtml";

    var error = ViewBag.Error;
}

<h3>@ViewBag.Title</h3>

<h2>
    @Html.ActionLink(linkText: "Create new issue", actionName: "Edit", controllerName: "Issue", routeValues: new { id = 0 }, htmlAttributes: new { @class = "btn btn-primary" })
</h2>

@if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@using (Html.BeginForm())
{
    <p>
        @Html.TextBox("SearchTerm", ViewBag.CurrentFilter as string, htmlAttributes: new { @placeholder = "Search", @maxlength = 200 })
        <button type="submit">
            <i class="glyphicon glyphicon-search"></i>
        </button>
    </p>
}

@if (Model.Issues != null && Model.Issues.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Project
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "ProjectShortName", isAscending = true, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "ProjectShortName", isAscending = false, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th>
                    Name
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "Name", isAscending = true, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "Name", isAscending = false, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th>
                    Begin Date
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "BeginDate", isAscending = true, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "BeginDate", isAscending = false, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th>
                    End Date
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "EndDate", isAscending = true, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "EndDate", isAscending = false, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th>
                    Assignee
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "EmployeeFullName", isAscending = true, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { sortColumn = "EmployeeFullName", isAscending = false, currentFilter = ViewBag.CurrentFilter })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th colspan="2"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var issue in Model.Issues)
            {
                <tr>
                    <td>@Html.DisplayFor(_ => issue.ProjectShortName)</td>
                    <td>@Html.DisplayFor(_ => issue.Name)</td>
                    <td>@Html.DisplayFor(_ => issue.BeginDate)</td>
                    <td>@Html.DisplayFor(_ => issue.EndDate)</td>
                    <td>@Html.DisplayFor(_ => issue.EmployeeFullName)</td>
                    <td>
                        <a href="@Url.Action(actionName: "Edit", controllerName: "Issue", routeValues: new { id = (int) issue.Id })">
                            <i class="glyphicon glyphicon-edit"></i>
                        </a>
                    </td>
                    <td>
                        <a href="@Url.Action(actionName: "Delete", controllerName: "Issue", routeValues: new { id = (int) issue.Id })">
                            <i class="glyphicon glyphicon-trash"></i>
                        </a>
                </tr>
            }
        </tbody>
    </table>
    if (Model.PageInfo.TotalItems > Model.PageInfo.PageSize)
    {
        <br />
        <div class="btn-group">
            @Html.PageLinks(Model.PageInfo, x => Url.Action(actionName: "List", controllerName: "Issue", routeValues: new { page = x, sortColumn = ViewBag.SortColumn, isAscending = ViewBag.IsAscending, currentFilter = ViewBag.CurrentFilter }))
        </div>
    }
}
else
{
    <div class="alert alert-warning" role="alert">
        Issues are not found!
    </div>
}
