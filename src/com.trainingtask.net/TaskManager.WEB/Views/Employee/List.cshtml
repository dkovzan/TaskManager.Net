@model TaskManager.WEB.ViewModels.EmployeesListView

@using TaskManager.WEB.Helpers

@{
    ViewBag.Title = "Employees list";

    var error = ViewBag.Error;
}

<h3>@ViewBag.Title</h3>

<h2>
    @Html.ActionLink(linkText: "Create new employee", actionName: "Edit", routeValues: new { id = 0 }, controllerName: "Employee", htmlAttributes: new { @class = "btn btn-primary" })

</h2>

@if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@if (Model.Employees != null && Model.Employees.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    First Name
                    <a href="@Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { sortColumn = "FirstName", isAscending = true })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { sortColumn = "FirstName", isAscending = false })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th>
                    Last Name
                    <a href="@Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { sortColumn = "LastName", isAscending = true })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { sortColumn = "LastName", isAscending = false })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th>
                    Middle Name
                    <a href="@Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { sortColumn = "MiddleName", isAscending = true })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { sortColumn = "MiddleName", isAscending = false })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th>
                    Position
                    <a href="@Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { sortColumn = "Position", isAscending = true })">
                        <i class="glyphicon glyphicon-triangle-top"></i>
                    </a>
                    <a href="@Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { sortColumn = "Position", isAscending = false })">
                        <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </th>
                <th colspan="2"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in Model.Employees)
            {
                <tr>
                    <td>@Html.DisplayFor(_ => employee.FirstName)</td>
                    <td>@Html.DisplayFor(_ => employee.LastName)</td>
                    <td>@Html.DisplayFor(_ => employee.MiddleName)</td>
                    <td>@Html.DisplayFor(_ => employee.Position)</td>
                    <td>
                        <a href="@Url.Action(actionName: "Edit", controllerName: "Employee", routeValues: new { id = (int) employee.Id })">
                            <i class="glyphicon glyphicon-edit"></i>
                        </a>
                    </td>
                    <td>
                        <a href="@Url.Action(actionName: "Delete", controllerName: "Employee", routeValues: new { id = (int) employee.Id })">
                            <i class="glyphicon glyphicon-trash"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    if (Model.PageInfo.TotalItems > Model.PageInfo.PageSize)
    { 
    <br />
    <div class="btn-group">
        @Html.PageLinks(Model.PageInfo, x => Url.Action(actionName: "List", controllerName: "Employee", routeValues: new { page = x, sortColumn = ViewBag.SortColumn, isAscending = ViewBag.IsAscending }))
    </div>
    }
}
else
{
    <div class="alert alert-warning" role="alert">
        There are no employees yet!
    </div>
}
