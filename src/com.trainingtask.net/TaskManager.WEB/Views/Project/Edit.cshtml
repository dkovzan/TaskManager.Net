@model TaskManager.WEB.ViewModels.ProjectDetailsView

@using TaskManager.WEB.ViewModels

@{
    ViewBag.Title = "Edit project";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var employees = ViewBag.Employees;

    //var issuesOfProject = ViewBag.IssuesOfProject;
}
<h2>@ViewBag.Title</h2>

@using (Html.BeginForm(actionName: "AddOrUpdate", controllerName: "Project"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ShortName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShortName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShortName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" onclick="clearTempProject()" />
                @Html.ActionLink(linkText: "Cancel", actionName: "List", routeValues: null, controllerName: "Project", htmlAttributes: new { @class = "btn" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink(linkText: "Add new task", actionName: "EditRuntime", routeValues: new { id = 0 }, controllerName: "Issue", htmlAttributes: new { @class = "btn btn-primary", @onclick = "saveTempProject()" })
            </div>
        </div>
    </div>
    if (Model.IssuesOfProject != null && Model.IssuesOfProject.Any())
    {
        <div class="project-tasks">
            <table class="table">
                <tr>
                    <th>Name</th>
                    <th>Begin Date</th>
                    <th>End Date</th>
                    <th>Assignee</th>
                    <th colspan="2"></th>
                </tr>

                @foreach (var issue in Model.IssuesOfProject)
                {
                    <tr>
                        <td>@Html.DisplayFor(_ => issue.Name)</td>
                        <td>@Html.DisplayFor(_ => issue.BeginDate)</td>
                        <td>@Html.DisplayFor(_ => issue.EndDate)</td>
                        <td>@Html.DisplayFor(_ => issue.EmployeeFullName)</td>
                        <td>@Html.ActionLink(linkText: "Edit", actionName: "EditRuntime", controllerName: "Issue", routeValues: new { id = (int)issue.Id }, htmlAttributes: new { @class = "btn btn-primary", @onclick = "saveTempProject()" })</td>
                        <td>@Html.ActionLink(linkText: "Delete", actionName: "DeleteRuntime", controllerName: "Issue", routeValues: new { id = (int)issue.Id }, htmlAttributes: new { @class = "btn btn-primary" })</td>
                    </tr>
                }

            </table>
        </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            There are no issues yet!
        </div>
    }


}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/editproject")
}
